{"ast":null,"code":"class SearchAndFilter {\n  searchAndFilter(courses, search, subject, interest_areas, minimumCredits, maximumCredits) {\n    var new_courses = [];\n\n    for (let i = 0; i < courses.length; i++) {\n      var course = courses[i]; // 1. Search\n      // only display courses that have a keyword that contains (or is) the user input from the search bar.\n\n      var containSearch = false;\n\n      for (let j = 0; j < course.keywords.length; j++) {\n        var keyword = course.keywords[j];\n\n        if (keyword.includes(search)) {\n          containSearch = true;\n        }\n      } // 2. Subject\n      // only display courses that match the selected subject\n\n\n      var isSubject = false;\n\n      if (subject === \"All\" || course.subject === subject) {\n        isSubject = true;\n      } // 3. Min\n\n\n      var min = false;\n\n      if (minimumCredits === \"\" || parseInt(minimumCredits) === NaN || parseInt(minimumCredits) <= parseInt(course.credits)) {\n        min = true;\n      } // 4. Max\n\n\n      var max = false;\n\n      if (maximumCredits === \"\" || parseInt(maximumCredits) === NaN || parseInt(maximumCredits) >= parseInt(course.credits)) {\n        max = true;\n      } // 5. Interest Areas\n\n\n      var isInterestAreas = false;\n\n      if (interest_areas === \"All\" || course.subject === interest_areas) {\n        isInterestAreas = true;\n      }\n\n      for (let j = 0; j < course.keywords.length; j++) {\n        var keyword = course.keywords[j];\n\n        if (keyword === interest_areas) {\n          isInterestAreas = true;\n        }\n      } // filter: \n\n\n      if (containSearch && isSubject && min && max && isInterestAreas) {\n        new_courses.push(course);\n      }\n    }\n\n    return new_courses;\n  }\n\n}\n\nexport default SearchAndFilter;","map":{"version":3,"sources":["/Users/yangxc/Desktop/react2-alpha-Xuechun19/src/SearchAndFilter.js"],"names":["SearchAndFilter","searchAndFilter","courses","search","subject","interest_areas","minimumCredits","maximumCredits","new_courses","i","length","course","containSearch","j","keywords","keyword","includes","isSubject","min","parseInt","NaN","credits","max","isInterestAreas","push"],"mappings":"AACA,MAAMA,eAAN,CAAsB;AACpBC,EAAAA,eAAe,CAACC,OAAD,EAAUC,MAAV,EAAkBC,OAAlB,EAA2BC,cAA3B,EAA2CC,cAA3C,EAA2DC,cAA3D,EAA2E;AACxF,QAAIC,WAAW,GAAG,EAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,OAAO,CAACQ,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,UAAIE,MAAM,GAAGT,OAAO,CAACO,CAAD,CAApB,CADuC,CAEvC;AACA;;AACA,UAAIG,aAAa,GAAG,KAApB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,QAAP,CAAgBJ,MAApC,EAA4CG,CAAC,EAA7C,EAAiD;AAC/C,YAAIE,OAAO,GAAGJ,MAAM,CAACG,QAAP,CAAgBD,CAAhB,CAAd;;AACA,YAAIE,OAAO,CAACC,QAAR,CAAiBb,MAAjB,CAAJ,EAA8B;AAC5BS,UAAAA,aAAa,GAAG,IAAhB;AACD;AACF,OAVsC,CAWvC;AACA;;;AACA,UAAIK,SAAS,GAAG,KAAhB;;AACA,UAAIb,OAAO,KAAK,KAAZ,IAAqBO,MAAM,CAACP,OAAP,KAAmBA,OAA5C,EAAqD;AACnDa,QAAAA,SAAS,GAAG,IAAZ;AACD,OAhBsC,CAiBvC;;;AACA,UAAIC,GAAG,GAAG,KAAV;;AACA,UAAIZ,cAAc,KAAK,EAAnB,IAAyBa,QAAQ,CAACb,cAAD,CAAR,KAA6Bc,GAAtD,IAA6DD,QAAQ,CAACb,cAAD,CAAR,IAA4Ba,QAAQ,CAACR,MAAM,CAACU,OAAR,CAArG,EAAuH;AACrHH,QAAAA,GAAG,GAAG,IAAN;AACD,OArBsC,CAsBvC;;;AACA,UAAII,GAAG,GAAG,KAAV;;AACA,UAAIf,cAAc,KAAK,EAAnB,IAAwBY,QAAQ,CAACZ,cAAD,CAAR,KAA6Ba,GAArD,IAA4DD,QAAQ,CAACZ,cAAD,CAAR,IAA4BY,QAAQ,CAACR,MAAM,CAACU,OAAR,CAApG,EAAsH;AACpHC,QAAAA,GAAG,GAAG,IAAN;AACD,OA1BsC,CA2BvC;;;AACA,UAAIC,eAAe,GAAG,KAAtB;;AACA,UAAIlB,cAAc,KAAK,KAAnB,IAA4BM,MAAM,CAACP,OAAP,KAAmBC,cAAnD,EAAmE;AACjEkB,QAAAA,eAAe,GAAG,IAAlB;AACD;;AACD,WAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,QAAP,CAAgBJ,MAApC,EAA4CG,CAAC,EAA7C,EAAiD;AAC/C,YAAIE,OAAO,GAAGJ,MAAM,CAACG,QAAP,CAAgBD,CAAhB,CAAd;;AACA,YAAIE,OAAO,KAAKV,cAAhB,EAAgC;AAC9BkB,UAAAA,eAAe,GAAG,IAAlB;AACD;AACF,OArCsC,CAsCvC;;;AACA,UAAIX,aAAa,IAAIK,SAAjB,IAA8BC,GAA9B,IAAqCI,GAArC,IAA4CC,eAAhD,EAAiE;AAC/Df,QAAAA,WAAW,CAACgB,IAAZ,CAAiBb,MAAjB;AACD;AACF;;AACD,WAAOH,WAAP;AACD;;AA/CmB;;AAkDtB,eAAeR,eAAf","sourcesContent":["\r\nclass SearchAndFilter {\r\n  searchAndFilter(courses, search, subject, interest_areas, minimumCredits, maximumCredits) {\r\n    var new_courses = []\r\n    for (let i = 0; i < courses.length; i++) {\r\n      var course = courses[i];\r\n      // 1. Search\r\n      // only display courses that have a keyword that contains (or is) the user input from the search bar.\r\n      var containSearch = false;\r\n      for (let j = 0; j < course.keywords.length; j++) {\r\n        var keyword = course.keywords[j];\r\n        if (keyword.includes(search)) {\r\n          containSearch = true;\r\n        }\r\n      }\r\n      // 2. Subject\r\n      // only display courses that match the selected subject\r\n      var isSubject = false;\r\n      if (subject === \"All\" || course.subject === subject) {\r\n        isSubject = true;\r\n      }\r\n      // 3. Min\r\n      var min = false;\r\n      if (minimumCredits === \"\" || parseInt(minimumCredits) === NaN || parseInt(minimumCredits) <= parseInt(course.credits)) {\r\n        min = true;\r\n      }\r\n      // 4. Max\r\n      var max = false;\r\n      if (maximumCredits === \"\" ||parseInt(maximumCredits) === NaN || parseInt(maximumCredits) >= parseInt(course.credits)) {\r\n        max = true;\r\n      }\r\n      // 5. Interest Areas\r\n      var isInterestAreas = false;\r\n      if (interest_areas === \"All\" || course.subject === interest_areas) {\r\n        isInterestAreas = true;\r\n      }\r\n      for (let j = 0; j < course.keywords.length; j++) {\r\n        var keyword = course.keywords[j];\r\n        if (keyword === interest_areas) {\r\n          isInterestAreas = true;\r\n        }\r\n      }\r\n      // filter: \r\n      if (containSearch && isSubject && min && max && isInterestAreas) {\r\n        new_courses.push(course);\r\n      }\r\n    }\r\n    return new_courses;\r\n  }\r\n}\r\n\r\nexport default SearchAndFilter;\r\n"]},"metadata":{},"sourceType":"module"}